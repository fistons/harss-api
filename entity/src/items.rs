//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "items"
    }
}

#[derive(Clone, Debug, PartialEq, Eq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub guid: Option<String>,
    pub title: Option<String>,
    pub url: Option<String>,
    pub content: Option<String>,
    pub fetch_timestamp: DateTimeWithTimeZone,
    pub publish_timestamp: Option<DateTimeWithTimeZone>,
    pub channel_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Guid,
    Title,
    Url,
    Content,
    FetchTimestamp,
    PublishTimestamp,
    ChannelId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Channels,
    UsersItems,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Guid => ColumnType::Text.def().null(),
            Self::Title => ColumnType::Text.def().null(),
            Self::Url => ColumnType::Text.def().null(),
            Self::Content => ColumnType::Text.def().null(),
            Self::FetchTimestamp => ColumnType::TimestampWithTimeZone.def(),
            Self::PublishTimestamp => ColumnType::TimestampWithTimeZone.def().null(),
            Self::ChannelId => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Channels => Entity::belongs_to(super::channels::Entity)
                .from(Column::ChannelId)
                .to(super::channels::Column::Id)
                .into(),
            Self::UsersItems => Entity::has_many(super::users_items::Entity).into(),
        }
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::users_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersItems.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
