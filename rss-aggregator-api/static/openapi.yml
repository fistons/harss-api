openapi: 3.0.3
info:
  title: RSS API
  description: An RSS API in rust
  version: 0.0.1
  contact:
    name: Eric
    email: eric@pedr0.net
    url: https://pedr0.net
servers:
  - url: '{protocol}://api.rss.pedr0.net'
    description: RSS Api
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
security:
  - basicAuth: [ ]
  - jwt: [ ]
tags:
  - name: Channels
    description: Channels related operation
  - name: Items
    description: Items, a.k.a articles related operation
  - name: Authentication
    description: Login and stuff
paths:
  /channels:
    get:
      operationId: get_channels
      tags:
        - Channels
      summary: Returns a list of registred channels.
      description: List all the rss channels registred.
      responses:
        '200':
          description: A list of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
        default:
          $ref: '#/components/responses/Error'
    post:
      operationId: new_channel
      tags:
        - Channels
      summary: Create a new channel.
      description: Create a new RSS channel to be polled frequently.
      requestBody:
        required: true
        description: Channel creation request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '201':
          $ref: '#/components/responses/NoContent'
        default:
          $ref: '#/components/responses/Error'
  /channel/{id}:
    get:
      operationId: get_channel
      tags:
        - Channels
      summary: Retrieve a single channel.
      description: Retrieve a single RSS channel informations.
      parameters:
        - name: id
          in: path
          description: Unique ID of a channel
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ChannelID'
      responses:
        '200':
          description: A single channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        default:
          $ref: '#/components/responses/Error'
  /channel/{id}/items:
    get:
      operationId: get_items
      tags:
        - Channels
        - Items
      summary: Returns items
      description: Returns the list of items of the given channel
      parameters:
        - name: id
          in: path
          description: Unique ID of a channel
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ChannelID'
      responses:
        '200':
          description: A list of item
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        default:
          $ref: '#/components/responses/Error'
  /auth/login:
    post:
      operationId: login
      tags:
        - Authentication
      summary: Create a JWT and a refresh token
      description: |
        Creates a JWT/refresh token. The generated token is valid for 15 minutes. The refresh token is valid
        for 5 days
      requestBody:
        required: true
        description: Users credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: A token pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
  /auth/refresh:
    post:
      operationId: refresh_auth
      tags:
        - Authentication
      summary: Refresh the JWT
      description: |
        Creates a JWT/refresh token. The generated JWT is valid for 15 minutes. The refresh token is valid
        for 5 days
      requestBody:
        required: true
        description: Refresh token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: A new JWT
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    $ref: '#/components/schemas/Jwt'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Token:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          $ref: '#/components/schemas/Jwt'
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'
    Jwt:
      type: string
      description: The JWT.
      minLength: 1
    RefreshToken:
      type: string
      description: The refresh token.
      minLength: 1
    RefreshRequest:
      type : object
      required: 
        - token
      properties: 
        token:
          $ref: '#/components/schemas/RefreshToken'
    LoginRequest:
      type: object
      description: A login attempt request.
      required:
        - login
        - password
      properties:
        login:
          $ref: '#/components/schemas/UserLogin'
        password:
          $ref: '#/components/schemas/UserPassword'
    UserLogin:
      type: string
      format: email
      description: The user's login (i.e. it's email).
      nullable: false
      minLength: 1
    UserPassword:
      type: string
      description: The user's password.
      nullable: false
      minLength: 1
    UserID:
      type: integer
      description: The user's unique ID.
      minimum: 1
    UserName:
      type: string
      description: The user's name.
      minLength: 1
      nullable: false
    CreateChannelRequest:
      type: object
      description: A RSS Channel creation request.
      required:
        - name
        - url
      properties:
        name:
          $ref: '#/components/schemas/ChannelName'
        url:
          $ref: '#/components/schemas/ChannelURL'
    Channel:
      type: object
      description: A RSS Channel.
      required:
        - id
        - name
        - url
      properties:
        id:
          $ref: '#/components/schemas/ChannelID'
        name:
          $ref: '#/components/schemas/ChannelName'
        url:
          $ref: '#/components/schemas/ChannelURL'
    ChannelID:
      type: integer
      description: ID of a channel.
      example: 1
    ChannelName:
      type: string
      description: Name of channel.
      minLength: 1
      nullable: false
      example: "Canard PC"
    ChannelURL:
      type: string
      format: URL
      minLength: 1
      nullable: false
      description: URL of a RSS channel.
      example: "https://canardpc.com/rss.xml"
    Item:
      type: object
      required:
        - id
        - title
        - guid
        - content
        - read
      properties:
        id:
          $ref: '#/components/schemas/ItemID'
        title:
          $ref: '#/components/schemas/ItemTitle'
        guid:
          $ref: '#/components/schemas/ItemGUID'
        content:
          $ref: '#/components/schemas/ItemContent'
        url:
          $ref: '#/components/schemas/ItemURL'
        read:
          type: boolean
          description: Is the item has already been read?
          example: false
    ItemID:
      type: integer
      description: Internal ID of an item.
      example: 1
    ItemTitle:
      type: string
      nullable: true
      description: Title of a item.
      example: "A Quick One Before The Eternal Worm Devours Connecticut"
    ItemGUID:
      type: string
      nullable: true
      description: GUID of an item.
      example: "https://example.com/this-is-the-end"
    ItemURL:
      type: string
      nullable: true
      description: URL of an item.
      example: "https://example.com/this-is-the-end"
    ItemContent:
      type: string
      nullable: true
      description: Content of an item.
      example: >-
        Once you beat the big badasses and clean out the moon base you're supposed to win, aren't you? Aren't you? Where's your fat reward and ticket home? What the hell is this? It's not supposed to end this way!

        It stinks like rotten meat, but looks like the lost Deimos base. Looks like you're stuck on the shores of Hell. The only way out is through.

        To continue the DOOM experience, play The Shores of Hell and its amazing sequel, Inferno!
    GenericProblem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ProblemType'
        title:
          type: string
          description: a short description of what went wrong
        detail:
          type: string
          description: A more detailed description of the problem
        status:
          type: integer
          description: the HTTP response status
    ProblemType:
      type: string
      description: |
        a relative URI of the type of error. It can be used to identify what kind of error
        this problem is about
      example: /errors/something-bad

  responses:
    default:
      description: Something unexpected went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
    NoContent:
      description: The request succeeded, but the response does not contain any information.
    Error:
      description: Something horrible and unexpected went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
    Forbidden:
      description: This action is forbidden to the currently logged-in user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
          examples:
            forbidden:
              value:
                type: /errors/forbidden
                title: Forbidden
                status: 403
                detail: Insufficient privileges.
                message: Insufficient privileges.
    Unauthorized:
      description: The request contained invalid credentials, expired credentials,
        or no credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
          examples:
            unauthorized:
              value:
                type: /errors/unauthorized
                title: Unauthorized
                status: 401
                detail: Full authentication is required to access this resource
                message: Full authentication is required to access this resource
    