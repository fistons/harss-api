stages:
  - check
  - package

test:cargo:
  image: "rust:latest"
  stage: check
  tags:
    - docker
  script:
    - rustc --version && cargo --version
    - cargo test --workspace --verbose
openapi linting:
  image:
    name: stoplight/spectral@sha256:3840979f18062e71ddf5cb31f1315315d24c2af446e53a4526fd3efc6aa6cb2e
    entrypoint: [ "" ]
  tags:
    - docker
  stage: check
  script:
    - spectral lint --fail-severity=warn --format junit -o report.xml rss-aggregator-api/static/openapi.yml
  artifacts:
    when: always
    reports:
      junit:
        - report.xml
    expire_in: 1 week
    paths:
      - report.xml
  allow_failure: true
  needs: [ ]

build api image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  tags:
    - docker
  stage: package
  before_script:
    - 'echo "{\"auths\":{\"$CI_REGISTRY_IMAGE\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json'
    - 'export DOCKER_IMAGE="$CI_REGISTRY_IMAGE${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:$CI_COMMIT_REF_SLUG-$CI_PIPELINE_IID"'
  script:
    - cp Cargo.lock rss-aggregator-api/Cargo.lock # Ugliest hack ever
    - '/kaniko/executor --cache=true --context $CI_PROJECT_DIR/rss-aggregator-api --dockerfile $CI_PROJECT_DIR/rss-aggregator-api/Dockerfile --destination $DOCKER_IMAGE'
    - echo "Image built and tagged $DOCKER_IMAGE"
  needs:
    - test:cargo

build webapp image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - docker
  stage: package
  before_script:
    - 'echo "{\"auths\":{\"$CI_REGISTRY_IMAGE\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json'
    - 'export DOCKER_IMAGE="$CI_REGISTRY_IMAGE${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:$CI_COMMIT_REF_SLUG-$CI_PIPELINE_IID"'
  script:
    - '/kaniko/executor --cache=true --context $CI_PROJECT_DIR/rss-aggregator-client --dockerfile $CI_PROJECT_DIR/rss-aggregator-client/Dockerfile --destination $DOCKER_IMAGE'
    - echo "Image built and tagged $DOCKER_IMAGE"