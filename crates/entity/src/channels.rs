//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "channels")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub url: String,
    pub registration_timestamp: DateTimeWithTimeZone,
    pub last_update: Option<DateTimeWithTimeZone>,
    pub disabled: bool,
    pub failure_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_users::Entity")]
    ChannelUsers,
    #[sea_orm(has_many = "super::channels_errors::Entity")]
    ChannelsErrors,
    #[sea_orm(has_many = "super::items::Entity")]
    Items,
    #[sea_orm(has_many = "super::users_items::Entity")]
    UsersItems,
}

impl Related<super::channels_errors::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelsErrors.def()
    }
}

impl Related<super::items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Items.def()
    }
}

impl Related<super::users_items::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersItems.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::channel_users::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::channel_users::Relation::Channels.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
