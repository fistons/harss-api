openapi: 3.0.3
info:
  title: RSS API
  description: An RSS API in rust
  version: 0.0.1
  contact:
    name: Eric
    email: eric@pedr0.net
    url: https://pedr0.net
servers:
  - url: '{protocol}://rss-dev-api.pedr0.net'
    description: Dev RSS Api
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
  - url: 'http://localhost:8080'
    description: Local RSS Api, for tests purpose
security:
  - basicAuth: [ ]
  - jwt: [ ]
tags:
  - name: Channels
    description: Channels related operation
  - name: Items
    description: Items, a.k.a articles related operation
  - name: Authentication
    description: Login and stuff
  - name: Users
    description: User management
paths:
  /users:
    get:
      operationId: list_users
      tags:
        - Users
      summary: Return a list of all users
      description: |
        __Available to administrators only.__
        
        List all registered users. 
      parameters:
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: A list of registered users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUsers'
        default:
          $ref: '#/components/responses/Error'
    post:
      operationId: new_user
      tags:
        - Users
      summary: Create a new user
      description: |
        __Available to administrators only or to everyone if specified in the configuration file.__
        
        Register a new user.
      requestBody:
        required: true
        description: User creation request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          $ref: '#/components/responses/ObjectCreatedResponse'
        default:
          $ref: '#/components/responses/Error'
  /channels/search:
    get:
      operationId: search_channels
      tags:
        - Channels
      summary: Returns a list of RSS channels for the given URL.
      description: Fetch the content of the URL and search for RSS channels
      parameters:
        - name: url
          in: query
          required: true
          example: "https://canardpc.com"
          schema:
            $ref: '#/components/schemas/WebsiteURL'
      responses:
        '200':
          description: A list of found channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoundChannel'
        default:
          $ref: '#/components/responses/Error'
  /channels:
    get:
      operationId: get_channels
      tags:
        - Channels
      summary: Returns a list of registered channels.
      description: List all the rss channels registered.
      parameters:
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: A list of channels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedChannels'
        default:
          $ref: '#/components/responses/Error'
    post:
      operationId: new_channel
      tags:
        - Channels
      summary: Create a new channel.
      description: Create a new RSS channel to be polled frequently.
      requestBody:
        required: true
        description: Channel creation request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '201':
          $ref: '#/components/responses/ObjectCreatedResponse'
        default:
          $ref: '#/components/responses/Error'
  /channel/{id}:
    get:
      operationId: get_channel
      tags:
        - Channels
      summary: Retrieve a single channel.
      description: Retrieve a single RSS channel information.
      parameters:
        - name: id
          in: path
          description: Unique ID of a channel
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ChannelID'
      responses:
        '200':
          description: A single channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        default:
          $ref: '#/components/responses/Error'
  /channel/{id}/enable:
    post:
      operationId: enable_channel
      tags:
        - Channels
      summary: Enable the channel and reset it's failure count.
      description: Enable the channel and reset it's failure count.
      parameters:
        - name: id
          in: path
          description: Unique ID of a channel
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ChannelID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        default:
          $ref: '#/components/responses/Error'
  /channel/{id}/items:
    get:
      operationId: get_items_of_channel
      tags:
        - Channels
        - Items
      summary: Returns items
      description: Returns the list of items of the given channel
      parameters:
        - name: id
          in: path
          description: Unique ID of a channel
          required: true
          example: 1
          schema:
            $ref: '#/components/schemas/ChannelID'
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: A list of item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedItems'
        default:
          $ref: '#/components/responses/Error'
  /auth/login:
    post:
      operationId: login
      tags:
        - Authentication
      summary: Create a JWT and a refresh token
      description: |
        Creates a JWT/refresh token. The generated token is valid for 15 minutes. The refresh token is valid
        for 5 days
      requestBody:
        required: true
        description: Users credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: A token pair
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
  /auth/refresh:
    post:
      operationId: refresh_auth
      tags:
        - Authentication
      summary: Refresh the JWT
      description: |
        Creates a JWT/refresh token. The generated JWT is valid for 15 minutes. The refresh token is valid
        for 5 days
      requestBody:
        required: true
        description: Refresh token.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: A new JWT
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    $ref: '#/components/schemas/Jwt'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
  /items:
    get:
      operationId: get_all_items
      tags:
        - Items
      summary: Return the last RSS items of the user
      description: Return the last RSS items of the user
      parameters:
        - name: size
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: page
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PageNumber'
        - name: read
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ItemRead'
        - name: starred
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ItemStarred'
      responses:
        '200':
          description: The last RSS items for the logged user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedItems'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Error'
  /items/read:
    post:
      operationId: read_items
      summary: Set items as read
      requestBody:
        required: true
        description: List of items IDs to read
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemIdList'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
  /items/unread:
    post:
      operationId: unread_items
      summary: Set items as unread
      requestBody:
        required: true
        description: List of items IDs to unread
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemIdList'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
  /items/star:
    post:
      operationId: star_items
      summary: Set items as starred
      requestBody:
        required: true
        description: List of items IDs to star
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemIdList'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
  /items/unstar:
    post:
      operationId: unstar_items
      summary: Set items as un-starred
      requestBody:
        required: true
        description: List of items IDs to un-star
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemIdList'
      responses:
        '202':
          $ref: '#/components/responses/Accepted'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ItemIdList:
      type: array
      description: A list of Item ID.
      items:
        $ref: '#/components/schemas/ItemID'
    PagedChannels:
      type: object
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Channel'
    PagedUsers:
      type: object
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/User'
    PagedItems:
      type: object
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          required:
            - content
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Item'
    Page:
      type: object
      required:
        - page
        - page_size
        - total_items
        - total_pages
        - elements_number
      properties:
        page:
          $ref: '#/components/schemas/PageNumber'
        page_size:
          $ref: '#/components/schemas/PageSize'
        total_pages:
          type: integer
          description: Total number of pages.
        elements_number:
          type: integer
          description: Number of elements in the content
        total_items:
          type: integer
          description: Total number of elements
    PageSize:
      type: integer
      description: Size of the page to retrieve
      minimum: 1
      maximum: 200
      example: 15
      default: 20
    PageNumber:
      type: integer
      description: Number of the page to retrieve
      minimum: 1
      default: 1
      example: 1
    Token:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          $ref: '#/components/schemas/Jwt'
        refresh_token:
          $ref: '#/components/schemas/RefreshToken'
    Jwt:
      type: string
      description: The JWT.
      minLength: 1
    RefreshToken:
      type: string
      description: The refresh token.
      minLength: 1
    RefreshRequest:
      type: object
      required:
        - token
      properties:
        token:
          $ref: '#/components/schemas/RefreshToken'
    LoginRequest:
      type: object
      description: A login attempt request.
      required:
        - login
        - password
      properties:
        login:
          $ref: '#/components/schemas/UserLogin'
        password:
          $ref: '#/components/schemas/UserPassword'
    CreateUserRequest:
      type: object
      description: User Creation request
      required:
        - username
        - password
        - role
      properties:
        username:
          $ref: '#/components/schemas/UserName'
        password:
          $ref: '#/components/schemas/UserPassword'
        role:
          $ref: '#/components/schemas/UserRole'
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        username:
          $ref: '#/components/schemas/UserName'
        role:
          $ref: '#/components/schemas/UserRole'
    UserLogin:
      type: string
      format: email
      description: The user's login (i.e. it's email).
      nullable: false
      minLength: 1
    UserRole:
      type: string
      description: The user's role (i.e. admin or not).
      nullable: false
      minLength: 1
    UserPassword:
      type: string
      description: The user's password.
      nullable: false
      minLength: 1
    UserID:
      type: integer
      description: The user's unique ID.
      minimum: 1
    UserName:
      type: string
      description: The user's name.
      minLength: 1
      nullable: false
    CreateChannelRequest:
      type: object
      description: A RSS Channel creation request.
      required:
        - name
        - url
      properties:
        name:
          $ref: '#/components/schemas/ChannelName'
        url:
          $ref: '#/components/schemas/ChannelURL'
    FoundChannel:
      type: object
      description: A RSS channel found in a website
      required:
        - title
        - url
      properties:
        title:
          $ref: '#/components/schemas/ChannelName'
        url:
          $ref: '#/components/schemas/ChannelURL'
    Channel:
      type: object
      description: A RSS Channel.
      required:
        - id
        - name
        - url
        - registration_timestamp
      properties:
        id:
          $ref: '#/components/schemas/ChannelID'
        name:
          $ref: '#/components/schemas/ChannelName'
        url:
          $ref: '#/components/schemas/ChannelURL'
        registration_timestamp:
          type: string
          format: date-time
          description: Timestamp of the channel registration
        last_update:
          type: string
          format: date-time
          description: Timestamp of the channel last update
        items_count:
          type: integer
          description: Total number of items for this channel
        items_read:
          type: integer
          description: Number of read items for this channel
        failure_count:
          type: integer
          description: Number of time this channel failed to be updated
        disabled:
          type: boolean
          description: Tells if the channel is disabled or not
    ChannelID:
      type: integer
      description: ID of a channel.
      example: 1
    ChannelName:
      type: string
      description: Name of channel.
      minLength: 1
      nullable: false
      example: "Canard PC"
    ChannelURL:
      type: string
      format: URL
      minLength: 1
      nullable: false
      description: URL of a RSS channel.
      example: "https://canardpc.com/rss.xml"
    WebsiteURL:
      type: string
      format: URL
      minLength: 1
      nullable: false
      description: URL of a website.
      example: "https://canardpc.com"
    Item:
      type: object
      required:
        - id
        - title
        - guid
        - content
        - fetch_timestamp
        - read
        - starred
      properties:
        id:
          $ref: '#/components/schemas/ItemID'
        title:
          $ref: '#/components/schemas/ItemTitle'
        guid:
          $ref: '#/components/schemas/ItemGUID'
        content:
          $ref: '#/components/schemas/ItemContent'
        url:
          $ref: '#/components/schemas/ItemURL'
        fetch_timestamp:
          type: string
          format: date-time
          description: Timestamp when the item was fetched
        publish_timestamp:
          type: string
          format: date-time
          description: Timestamp when the item was publish
        read:
          $ref: '#/components/schemas/ItemRead'
        starred:
          $ref: '#/components/schemas/ItemStarred'
        channel_id:
          $ref: '#/components/schemas/ChannelID'
        channel_name:
          $ref: '#/components/schemas/ChannelName'
    ItemStarred:
      type: boolean
      description: The item has been read
      example: false
    ItemRead:
      type: boolean
      description: The item has been read
      example: false
    ItemID:
      type: integer
      description: Internal ID of an item.
      example: 1
    ItemTitle:
      type: string
      nullable: true
      description: Title of a item.
      example: "A Quick One Before The Eternal Worm Devours Connecticut"
    ItemGUID:
      type: string
      nullable: true
      description: GUID of an item.
      example: "https://example.com/this-is-the-end"
    ItemURL:
      type: string
      nullable: true
      description: URL of an item.
      example: "https://example.com/this-is-the-end"
    ItemContent:
      type: string
      nullable: true
      description: Content of an item.
      example: >-
        Once you beat the big badasses and clean out the moon base you're supposed to win, aren't you? Aren't you? Where's your fat reward and ticket home? What the hell is this? It's not supposed to end this way!

        It stinks like rotten meat, but looks like the lost Deimos base. Looks like you're stuck on the shores of Hell. The only way out is through.

        To continue the DOOM experience, play The Shores of Hell and its amazing sequel, Inferno!
    GenericProblem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ProblemType'
        title:
          type: string
          description: a short description of what went wrong
        detail:
          type: string
          description: A more detailed description of the problem
        status:
          type: integer
          description: the HTTP response status
    ProblemType:
      type: string
      description: |
        a relative URI of the type of error. It can be used to identify what kind of error
        this problem is about
      example: /errors/something-bad
    ObjectCreatedId:
      type: object
      description: ID of the created object.
      properties:
        id:
          type: integer
  responses:
    default:
      description: Something unexpected went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
    NoContent:
      description: The request succeeded, but the response does not contain any information.
    Accepted:
      description: The request has been accepted for processing, but the processing has not been completed
    ObjectCreatedResponse:
      description: The requested object has been created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObjectCreatedId'
    Error:
      description: Something horrible and unexpected went wrong.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
    Forbidden:
      description: This action is forbidden to the currently logged-in user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
          examples:
            forbidden:
              value:
                type: /errors/forbidden
                title: Forbidden
                status: 403
                detail: Insufficient privileges.
                message: Insufficient privileges.
    Unauthorized:
      description: The request contained invalid credentials, expired credentials,
        or no credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericProblem'
          examples:
            unauthorized:
              value:
                type: /errors/unauthorized
                title: Unauthorized
                status: 401
                detail: Full authentication is required to access this resource
                message: Full authentication is required to access this resource
    